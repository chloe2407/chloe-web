{"version":3,"sources":["components/containers/Header.js","components/pages/HomePage.js","components/containers/Body.js","components/containers/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","classes","Component","withStyles","theme","HomepageImage","src","style","width","alt","Body","path","exact","component","createMuiTheme","typography","fontFamily","join","fontSize","h2","fontWeight","lineHeight","h4","body1","margin","body2","caption","color","display","useNextVariants","palette","primary","main","contrastText","secondary","overrides","MuiButton","root","borderRadius","padding","marginRight","App","ThemeProvider","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RASMA,E,uKAEcC,KAAKC,MAAMC,QAE3B,OACE,mD,GALeC,aAaNC,eAjBA,SAAAC,GAAK,MAAK,KAiBVD,CAAmBL,G,OCbnBO,MAPf,WAEE,OACE,yBAAKC,IAFK,wDAEKC,MAAO,CAACC,MAAO,KAAMC,IAAI,wBCY7BC,E,uKAPX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWR,S,GAJtBH,aCQJC,eAZA,SAAAC,GAAK,MAAK,KAYVD,EARA,SAAAH,GACb,OACE,kDCDEI,EAAQU,YAAe,CAC3BC,WAAY,CACVC,WAAY,CAAC,SAAU,cAAcC,KAAK,KAC1CC,SAAU,GACVC,GAAI,CACFC,WAAY,IACZF,SAAU,GACVG,WAAY,IACZ,iBAAkB,aAEpBC,GAAI,CACFF,WAAY,IACZ,iBAAkB,aAEpBG,MAAO,CACLL,SAAU,GACVM,OAAQ,UAEVC,MAAO,CACLP,SAAU,GACVM,OAAQ,UAEVE,QAAS,CACPR,SAAU,GACVS,MAAO,UACPC,QAAS,SACTR,WAAY,OAEdS,iBAAiB,GAEnBC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTF,KAAM,YAGVG,UAAW,CACTC,UAAW,CACTC,KAAM,CACJjB,WAAY,IACZkB,aAAc,GACdC,QAAS,uBACTC,YAAa,GACb,iBAAkB,aAClBtB,SAAU,QAsBHuB,E,uKAdX,OACE,kBAACC,EAAA,EAAD,CAAetC,MAAOA,GACpB,yBAAKuC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GARMzC,aClDE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.036b2013.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\n\n\n\nconst styles = theme => ({\n  \n})\n\nclass Header extends Component {\n  render() {\n    const classes = this.props.classes;\n\n    return (\n      <div>\n          this is header\n      </div>\n    );\n  }\n}\n\n\nexport default withStyles(styles)(Header);","import React from 'react';\n\nfunction HomepageImage() {\n  const url = 'https://cdn.filestackcontent.com/XYrHCaFGRSaq0EPKY1S6';\n  return (\n    <img src={url} style={{width: 650}} alt='Golden Gate Bridge' />\n  );\n}\n\nexport default HomepageImage;","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomepageImage from \"../pages/HomePage\";\n\nimport HomePage from \"../pages/HomePage\";\n\n\n//user ROUTE to switch from different pages\nclass Body extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/\" exact component={HomepageImage} />\n      </Switch>\n    );\n  }\n}\nexport default Body;","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\n\nconst styles = theme => ({\n  \n});\n\nconst Footer = props => {\n  return (\n    <div>\n      this is footer\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Footer);\n","import React, { Component } from \"react\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Header from \"./components/containers/Header\";\nimport Body from \"./components/containers/Body\";\nimport Footer from \"./components/containers/Footer\";\n\n//custom theme color\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Nunito\", \"sans-serif\"].join(\",\"),\n    fontSize: 12,\n    h2: {\n      fontWeight: 800,\n      fontSize: 40,\n      lineHeight: 1.2,\n      \"text-transform\": \"uppercase\"\n    },\n    h4: {\n      fontWeight: 700,\n      \"text-transform\": \"uppercase\"\n    },\n    body1: {\n      fontSize: 18,\n      margin: \"10px 0\"\n    },\n    body2: {\n      fontSize: 18,\n      margin: \"20px 0\"\n    },\n    caption: {\n      fontSize: 16,\n      color: \"#FC5185\",\n      display: \"inline\",\n      fontWeight: \"900\"\n    },\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: \"#11D3BC\",\n      contrastText: \"#fff\"\n    },\n    secondary: {\n      main: \"#FC5185\"\n    }\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        fontWeight: 700,\n        borderRadius: 50,\n        padding: \"10px 30px !important\",\n        marginRight: 32,\n        \"text-transform\": \"capitalize\",\n        fontSize: 16\n      }\n    }\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <Router>\n            <Header />\n            <Body />\n            <Footer />\n          </Router>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}